{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["sample","items","Math","floor","random","length","useRandomVerse","React","useState","verse","setVerse","data","setData","useEffect","a","fetch","res","json","fetchData","useData","key","text","undefined","storeGuess","guess","method","headers","body","JSON","stringify","Chooser","onAnswer","className","onClick","RealReveal","src","alt","FakeReveal","appleSauce","real_verses","fake_verses","App","resetVerse","hidden","setHidden","answer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAyBMA,EAAS,SAAgBC,GAE7B,OAAOA,EADOC,KAAKC,MAAMD,KAAKE,SAAWH,EAAMI,UAS3CC,EAAiB,WAAuC,IAAD,EACjCC,IAAMC,WAD2B,mBACpDC,EADoD,KAC7CC,EAD6C,KAErDC,EA3BQ,WAAO,IAAD,EACIJ,IAAMC,WADV,mBACbG,EADa,KACPC,EADO,KAYpB,OATAL,IAAMM,WAAU,WAAM,4CACpB,4BAAAC,EAAA,sEACoBC,MAAM,aAD1B,cACQC,EADR,YAEEJ,EAFF,SAEgBI,EAAIC,OAFpB,8EADoB,uBAAC,WAAD,wBAMpBC,KACC,IAEIP,EAeMQ,GAcb,OAVAZ,IAAMM,WAAU,WACd,GAAKF,IACDF,EAAJ,CAEA,IAAMW,EAAMpB,EAAe,CAAC,cAAe,gBACrCqB,EAAOrB,EAAOW,EAAKS,IAEzBV,EAAS,CAACU,MAAKC,YACd,CAACV,EAAMF,IAEH,CAACA,EAZM,kBAAMC,OAASY,MAsBzBC,EAAU,uCAAG,WAAOC,GAAP,SAAAV,EAAA,sEACXC,MAAM,mDAAoD,CAC9DU,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAUL,KAJN,2CAAH,sDASVM,EAAU,SAAC,GAA0D,IAAxDC,EAAuD,EAAvDA,SACjB,OAAQ,qCACN,wBAAQC,UAAU,OAAOC,QAAS,kBAAMF,EAAS,SAAjD,kBACA,wBAAQC,UAAU,OAAOC,QAAS,kBAAMF,EAAS,SAAjD,sBAIEG,EAAa,kBACjB,gCACE,sCACA,qBAAKC,IAAI,WAAWC,IAAI,eAAeJ,UAAU,aAI/CK,EAAa,kBACjB,gCACE,sCACA,qBAAKF,IAAI,WAAWC,IAAI,gBAAgBJ,UAAU,aAIhDM,EAA8C,CAClDC,YAAa,cAAC,EAAD,IACbC,YAAa,cAAC,EAAD,KAmCAC,MAhCf,WAAgB,IAAD,EACenC,IADf,mBACNG,EADM,KACCiC,EADD,OAEenC,IAAMC,UAAS,GAF9B,mBAENmC,EAFM,KAEEC,EAFF,KAUb,IAAKnC,EAAO,OAAO,KAEnB,IAAMsB,EAAQ,uCAAG,WAAOc,GAAP,SAAA/B,EAAA,6DACf8B,GAAU,GADK,SAETrB,EAAW,CAAEd,MAAK,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAOY,KAAMwB,WAFxB,2CAAH,sDAKd,OACE,qBAAKb,UAAU,MAAf,SACE,sBAAKA,UAAU,UAAf,UACE,4BAAIvB,EAAMY,OACTsB,GAAUL,EAAW7B,EAAMW,KAE3BuB,EACG,cAAC,EAAD,CAASZ,SAAUA,IACnB,wBAAQC,UAAU,YAAYC,QArB1B,WACZW,GAAU,GACVF,KAmBQ,6BC3GGI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.83ffc82b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\ntype Choice = 'real_verses' | 'fake_verses'\n\ntype Data = {\n  [choice in Choice]: string[];\n};\n\nconst useData = () => {\n  const [data, setData] = React.useState<Data>()\n\n  React.useEffect(() => {\n    async function fetchData() {\n      const res = await fetch('data.json')\n      setData(await res.json())\n    }\n\n    fetchData();\n  }, [])\n\n  return data\n}\n\nconst sample = <T extends any>(items: T[]): T => {\n  const index = Math.floor(Math.random() * items.length)\n  return items[index]\n}\n\ninterface Verse {\n  key: Choice;\n  text: string;\n}\n\nconst useRandomVerse = ():[Verse | undefined, () => void] => {\n  const [verse, setVerse] = React.useState<Verse>()\n  const data = useData()\n\n  const reset = () => setVerse(undefined)\n\n  React.useEffect(() => {\n    if (!data) return;\n    if (verse) return;\n\n    const key = sample<Choice>(['real_verses', 'fake_verses'])\n    const text = sample(data[key])\n\n    setVerse({key, text})\n  }, [data, verse])\n\n  return [verse, reset]\n}\n\ntype Answer = 'fake' | 'real'\n\ninterface Guess {\n  verse: string;\n  answer: Answer;\n}\n\nconst storeGuess = async (guess: Guess) => {\n  await fetch('https://bibble-worker.loqwai.workers.dev/guesses', {\n    method: 'POST',\n    headers: {'Content-Type': 'application/json'},\n    body: JSON.stringify(guess),\n  })\n}\n\n\nconst Chooser = ({ onAnswer }: { onAnswer: (answer: Answer) => void }) => {\n  return (<>\n    <button className=\"Real\" onClick={() => onAnswer('real')}>Real</button>\n    <button className=\"Fake\" onClick={() => onAnswer('fake')}>Fake</button>\n  </>);\n}\n\nconst RealReveal = () => (\n  <div>\n    <h1>Real</h1>\n    <img src=\"real.jpg\" alt=\"buddy christ\" className=\"Real\"></img>\n  </div>\n)\n\nconst FakeReveal = () => (\n  <div>\n    <h1>Fake</h1>\n    <img src=\"fake.jpg\" alt=\"the charletan\" className=\"Fake\"></img>\n  </div>\n)\n\nconst appleSauce: {[key in Choice]: JSX.Element} =  {\n  real_verses: <RealReveal />,\n  fake_verses: <FakeReveal />,\n}\n\nfunction App() {\n  const [verse, resetVerse] = useRandomVerse()\n  const [hidden, setHidden] = React.useState(true)\n\n  const reset = () => {\n    setHidden(true)\n    resetVerse();\n  }\n\n\n  if (!verse) return null\n\n  const onAnswer = async (answer: Answer) => {\n    setHidden(false)\n    await storeGuess({ verse: verse?.text, answer })\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"Content\">\n        <p>{verse.text}</p>\n        {hidden || appleSauce[verse.key]}\n\n        {hidden\n          ? <Chooser onAnswer={onAnswer} />\n          : <button className=\"Try-Again\" onClick={reset}>Try Again</button>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}