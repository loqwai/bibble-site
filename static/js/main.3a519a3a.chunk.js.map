{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["sample","items","Math","floor","random","length","useRandomVerse","React","useState","verse","setVerse","data","setData","useEffect","a","fetch","res","json","fetchData","useData","key","text","Chooser","onChoose","className","onClick","appleSauce","real_verses","fake_verses","App","hidden","setHidden","window","location","reload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAyBMA,EAAS,SAAgBC,GAE7B,OAAOA,EADOC,KAAKC,MAAMD,KAAKE,SAAWH,EAAMI,UAK3CC,EAAiB,WAAO,IAAD,EACDC,IAAMC,WADL,mBACpBC,EADoB,KACbC,EADa,KAErBC,EAvBQ,WAAO,IAAD,EACIJ,IAAMC,WADV,mBACbG,EADa,KACPC,EADO,KAYpB,OATAL,IAAMM,WAAU,WAAM,4CACpB,4BAAAC,EAAA,sEACoBC,MAAM,aAD1B,cACQC,EADR,YAEEJ,EAFF,SAEgBI,EAAIC,OAFpB,8EADoB,uBAAC,WAAD,wBAMpBC,KACC,IAEIP,EAWMQ,GAWb,OATAZ,IAAMM,WAAU,WACd,GAAKF,EAAL,CAEA,IAAMS,EAAMpB,EAAe,CAAC,cAAe,gBACrCS,EAAQT,EAAOW,EAAKS,IAE1BV,EAAS,CAACU,MAAKC,KAAMZ,OACpB,CAACE,IAEGF,GAGHa,EAAU,SAAC,GAA0D,IAAxDC,EAAuD,EAAvDA,SACjB,OAAQ,qCACN,wBAAQC,UAAU,OAAOC,QAAS,kBAAMF,EAAS,gBAAjD,kBACA,wBAAQC,UAAU,OAAOC,QAAS,kBAAMF,EAAS,gBAAjD,sBAIEG,EAAyC,CAC7CC,YAAa,OACbC,YAAa,QAwBAC,MArBf,WACE,IAAMpB,EAAQH,IADD,EAEeC,IAAMC,UAAS,GAF9B,mBAENsB,EAFM,KAEEC,EAFF,KAIb,OAAKtB,EAGH,qBAAKe,UAAU,MAAf,SACE,sBAAKA,UAAU,UAAf,UACE,4BAAIf,EAAMY,OACTS,GAAU,6BAAKJ,EAAWjB,EAAMW,OAEhCU,EACG,cAAC,EAAD,CAASP,SAAU,kBAAMQ,GAAU,MACnC,wBAAQP,UAAU,YAAYC,QAAS,kBAAKO,OAAOC,SAASC,UAA5D,4BAVS,MCjDNC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3a519a3a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\ntype Choice = 'real_verses' | 'fake_verses'\n\ntype Data = {\n  [choice in Choice]: string[];\n};\n\nconst useData = () => {\n  const [data, setData] = React.useState<Data>()\n\n  React.useEffect(() => {\n    async function fetchData() {\n      const res = await fetch('data.json')\n      setData(await res.json())\n    }\n\n    fetchData();\n  }, [])\n\n  return data\n}\n\nconst sample = <T extends any>(items: T[]): T => {\n  const index = Math.floor(Math.random() * items.length)\n  return items[index]\n}\n\n\nconst useRandomVerse = () => {\n  const [verse, setVerse] = React.useState<{key: Choice, text: string}>()\n  const data = useData()\n\n  React.useEffect(() => {\n    if (!data) return;\n\n    const key = sample<Choice>(['real_verses', 'fake_verses'])\n    const verse = sample(data[key])\n\n    setVerse({key, text: verse})\n  }, [data])\n\n  return verse\n}\n\nconst Chooser = ({ onChoose }: { onChoose: (choice: Choice) => void }) => {\n  return (<>\n    <button className=\"Real\" onClick={() => onChoose('real_verses')}>Real</button>\n    <button className=\"Fake\" onClick={() => onChoose('fake_verses')}>Fake</button>\n  </>);\n}\n\nconst appleSauce: {[key in Choice]: string} =  {\n  real_verses: 'Real',\n  fake_verses: 'Fake',\n}\n\nfunction App() {\n  const verse = useRandomVerse()\n  const [hidden, setHidden] = React.useState(true)\n\n  if (!verse) return null\n\n  return (\n    <div className=\"App\">\n      <div className=\"Content\">\n        <p>{verse.text}</p>\n        {hidden || <h1>{appleSauce[verse.key]}</h1>}\n\n        {hidden\n          ? <Chooser onChoose={() => setHidden(false)} />\n          : <button className=\"Try-Again\" onClick={()=> window.location.reload()}>Try Again</button>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}