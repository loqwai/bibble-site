{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["randomChoice","items","Math","floor","random","length","useRandomChoice","React","useState","choice","setChoice","data","setData","useEffect","a","fetch","res","json","fetchData","useData","key","verse","App","hidden","setHidden","className","onClick","window","location","reload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PA0BMA,EAAe,SAAgBC,GAEnC,OAAOA,EADOC,KAAKC,MAAMD,KAAKE,SAAWH,EAAMI,UAK3CC,EAAkB,WAAO,IAAD,EACAC,IAAMC,WADN,mBACrBC,EADqB,KACbC,EADa,KAEtBC,EAvBQ,WAAO,IAAD,EACIJ,IAAMC,WADV,mBACbG,EADa,KACPC,EADO,KAYpB,OATAL,IAAMM,WAAU,WAAM,4CACpB,4BAAAC,EAAA,sEACoBC,MAAM,aAD1B,cACQC,EADR,YAEEJ,EAFF,SAEgBI,EAAIC,OAFpB,8EADoB,uBAAC,WAAD,wBAMpBC,KACC,IAEIP,EAWMQ,GAWb,OATAZ,IAAMM,WAAU,WACd,GAAKF,EAAL,CAEA,IAAMS,EAAMpB,EAAmB,CAAC,cAAe,gBACzCqB,EAAQrB,EAAaW,EAAKS,IAEhCV,EAAU,CAACU,MAAKC,aACf,CAACV,IAEGF,GAsBMa,MAnBf,WACE,IAAMb,EAASH,IADF,EAEeC,IAAMC,UAAS,GAF9B,mBAENe,EAFM,KAEEC,EAFF,KAIb,OACE,qBAAKC,UAAU,MAAf,SACE,sBAAKA,UAAU,UAAf,UACE,mCAAIhB,QAAJ,IAAIA,OAAJ,EAAIA,EAAQY,QACXE,GAAU,oCAAKd,QAAL,IAAKA,OAAL,EAAKA,EAAQW,MAEvBG,EACG,wBAAQE,UAAU,SAASC,QAAS,kBAAMF,GAAU,IAApD,oBACA,wBAAQC,UAAU,YAAYC,QAAS,kBAAIC,OAAOC,SAASC,UAA3D,6BC9CGC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.792d77c1.chunk.js","sourcesContent":["import { stringify } from 'querystring';\nimport React from 'react';\nimport './App.css';\n\n\ntype Type = 'real_verses' | 'fake_verses'\n\ntype Data = {\n  [type in Type]: string[];\n};\n\nconst useData = () => {\n  const [data, setData] = React.useState<Data>()\n\n  React.useEffect(() => {\n    async function fetchData() {\n      const res = await fetch('data.json')\n      setData(await res.json())\n    }\n\n    fetchData();\n  }, [])\n\n  return data\n}\n//const foo = <T, >(x: T) => x;\nconst randomChoice = <T extends any>(items: T[]): T => {\n  const index = Math.floor(Math.random() * items.length)\n  return items[index]\n}\n\n\nconst useRandomChoice = () => {\n  const [choice, setChoice] = React.useState<{key: string, verse: string}>()\n  const data = useData()\n\n  React.useEffect(() => {\n    if (!data) return;\n\n    const key = randomChoice<Type>(['real_verses', 'fake_verses'])\n    const verse = randomChoice(data[key])\n\n    setChoice({key, verse})\n  }, [data])\n\n  return choice\n}\n\nfunction App() {\n  const choice = useRandomChoice()\n  const [hidden, setHidden] = React.useState(true)\n\n  return (\n    <div className=\"App\">\n      <div className=\"Content\">\n        <p>{choice?.verse}</p>\n        {hidden || <h1>{choice?.key}</h1>}\n\n        {hidden\n          ? <button className=\"Reveal\" onClick={() => setHidden(false)}>Reveal</button>\n          : <button className=\"Try-Again\" onClick={()=>window.location.reload()}>Try Again</button>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}